/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* 
 * This rule will allow all users to access PropertyListing (intent for sale)
 * Asset registry
 */
rule AllUserAllowPropertyListing {
    description: "Allow user to access propertyListing registry"
    participant: "org.property.registration.User"
    operation: ALL
    resource: "org.property.registration.PropertyListing"
    action: ALLOW
}

/* 
 * This rule will deny all users to CREATE/DELETE Users asset registry for
 * users registry.
 * Create & delete user is being carried out by Admin only.
 * IMPORTANT NOTE: DENYING READ & UPDATE access wont allow to carry out
 * purchaseProperty function by others users, since it will require the access
 * to other users, te READ & UPDATE their balances.
 */
rule UserDenyCreateDeleteUserAccessForUsersRegistry {
    description: "Deny users to create, delete other users"
    participant: "org.property.registration.User"
    operation: DELETE, CREATE
    resource: "org.property.registration.User"
    action: DENY
}

/* 
 * This rule will deny all users to CREATE/DELETE Property asset registry for
 * OTHER users.
 * IMPORTANT NOTE: DENYING READ & UPDATE access wont allow to carry out
 * purchaseProperty function by others users, since it will require the access
 * to property owned by others, as well require to makes changes by a user
 * willing to purchase property & doesn't own it yet.
 */
rule UserDenyCreateDeletePropertyAccessForOtherUsers {
    description: "Deny users to create, delete other's properties"
    participant(p): "org.property.registration.User"
    operation: DELETE, CREATE
    resource(r): "org.property.registration.Property"
    condition: (r.owner.getIdentifier() !== p.getIdentifier())
    action: DENY
}

/*
 * Allow user to access the Property Asset registry
 * Create/Update deny will is achieved by rule above
 */
rule UserAccessPropertyRegistry {
    description: "Allow user to access property registry"
    participant: "org.property.registration.User"
    operation: ALL
    resource: "org.property.registration.Property"
    action: ALLOW
}

/* Allow all users to carry out all transactions */
rule AllUserAllTransactions {
    description: "Allow all users to run all transactions"
    participant: "org.property.registration.**"
    operation: ALL
    resource: "org.hyperledger.composer.system.Transaction"
    action: ALLOW
}


rule AllParticipantsViewSystem {
    description: "allow all participants system view"
    participant: "org.hyperledger.composer.system.Participant"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule NetworkAdminUser {
    description: "Grant business network administrators full access to user resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "**"
    action: ALLOW
}

rule NetworkAdminSystem {
    description: "Grant business network administrators full access to system resources"
    participant: "org.hyperledger.composer.system.NetworkAdmin"
    operation: ALL
    resource: "org.hyperledger.composer.system.**"
    action: ALLOW
}
